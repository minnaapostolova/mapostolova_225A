'demo()'
# Command + option + I = new R code chunk
5+5
# Command + option + I = new R code chunk
5+5
# Command + Shift runs the code chunk
# Command + option + I = new R code chunk
5+5
list.file()
```{r}
# Command + option + I = new R code chunk
5+5
```{r}
```{r}
# Command + option + I = new R code chunk
list.files()
# Command + option + I = new R code chunk
path.expand('~')
list.files()
library(tidyverse)
library(tidyverse)
# Anything between commas = column
sf_weater <- read.csv("../raw_data/sf_weather.csv") # "../xxx" goes up in file directory
# Anything between commas = column
sf_weather <- read.csv("../raw_data/sf_weather.csv") # "../xxx" goes up in file directory
View(sf_weater)
View(sf_weater)
del sf_weater
rm sf_weater
rm(sf_weater)
View(sf_weather)
head(sf_weather)
# Anything between commas = column
sf_weather <- read.csv("../raw_data/sf_weather.csv") # "../xxx" goes up in file directory
head(sf_weather)
unique(sf_weather$SNOW) # $ allows you to pick a column
# Anything between commas = column
sf_weather <- read.csv("../raw_data/sf_weather.csv") # "../xxx" goes up in file directory
head(sf_weather)
unique(sf_weather$SNOW) # $ allows you to pick a column by name
sf_weather[sf_weather$SNOW == '0.8']
sf_weather$DATE[sf_weather$SNOW == '0.8']
# Anything between commas = column
sf_weather <- read.csv("../raw_data/sf_weather.csv") # "../xxx" goes up in file directory
head(sf_weather)
unique(sf_weather$SNOW) # $ allows you to pick a column by name
unique(sf_weather$DATE[sf_weather$SNOW == '0.8'])
sf_weather %>% # Piping command
select(DATE)
select(sf_weather$DATE)
sf_weather %>% # Piping command
select(DATE)
sf_weather %>% # Piping command
select( c(DATE, TMAX, TMIN) )
sf_weather %>% # Piping command
select( c(DATE, TMAX, TMIN) ) %>% # Selecting 3 columns in a list
separate( DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE )
sf_weather %>% # Piping command
select( c(DATE, TMAX, TMIN) ) %>% # Selecting 3 columns in a list
separate( DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE ) %>%
filter(YEAR == '2021')
sf_water_2021 <- sf_weather %>% # Piping command
select( c(DATE, TMAX, TMIN) ) %>% # Selecting 3 columns in a list
separate( DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE ) %>%
filter(YEAR == '2021')
select(sf_weather, DATE)
select(sf_weather, c(DATE, TMAX, TMIN) )
separate(select(sf_weather, c(DATE, TMAX, TMIN) ), DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE )
filter(separate(select(sf_weather, c(DATE, TMAX, TMIN) ), DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE ), YEAR == '2021' )
sf_weather_2021 %>%
mutate('TAVG' = (TMAX + TMIN) / 2 )
sf_water_2021 <- sf_weather %>% # Piping command
select( c(DATE, TMAX, TMIN) ) %>% # Selecting 3 columns in a list
separate( DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE ) %>%
filter(YEAR == '2021')
sf_weather_2021 %>%
mutate('TAVG' = (TMAX + TMIN) / 2 )
sf_weather_2021 <- sf_weather %>% # Piping command
select( c(DATE, TMAX, TMIN) ) %>% # Selecting 3 columns in a list
separate( DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE ) %>%
filter(YEAR == '2021')
sf_weather_2021 %>%
mutate('TAVG' = (TMAX + TMIN) / 2 )
rm(sf_water_2021)
sf_weather_2021 %>%
mutate('TAVG' = (TMAX + TMIN) / 2 ) %>%
group_by(MONTH)
sf_weather_2021 %>%
mutate('TAVG' = (TMAX + TMIN) / 2 ) %>%
group_by(MONTH) %>% # adds group to df
summarise("MAX_MONTH_TEMP" = max(TAVG) ) # creates a new column with max average temperature
max_temp_month <- sf_weather_2021 %>%
mutate('TAVG' = (TMAX + TMIN) / 2 ) %>%
group_by(MONTH) %>% # adds group to df
summarise("MAX_MONTH_TEMP" = max(TAVG) ) # creates a new column with max average temperature
max_temp_month_2021 <- sf_weather_2021 %>%
mutate('TAVG' = (TMAX + TMIN) / 2 ) %>%
group_by(MONTH) %>% # adds group to df
summarise("MAX_MONTH_TEMP" = max(TAVG) ) # creates a new column with max average temperature
rm(max_temp_month)
View(max_temp_month_2021)
plot(max_temp_month_2021)
sf_weather %>%
select( c(DATE, TMAX, TMIN) ) %>%
separate( DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE ) %>%
filter(YEAR == '2021') %>%
mutate('TAVG' = (TMAX + TMIN) / 2 ) %>%
group_by(MONTH) %>%
summarise("MAX_MONTH_TEMP" = max(TAVG) )
yearly_subsetter <- function(year) {
sf_weather %>%
select( c(DATE, TMAX, TMIN) ) %>%
separate( DATE, c("YEAR", "MONTH", "DAY"), sep = '-', remove = FALSE ) %>%
filter(YEAR == year) %>%
mutate('TAVG' = (TMAX + TMIN) / 2 ) %>%
group_by(MONTH) %>%
summarise("MAX_MONTH_TEMP" = max(TAVG) )
}
View(yearly_subsetter)
yearly_subsetter(2000)
yearly_subsetter(1921) < yearly_subsetter(2021)
yearly_subsetter('2000')
plot(yearly_subsetter(1950))
yearly_subsetter(1921) < yearly_subsetter(2021)
for (single_year in c("1930", "1931", "1937")) {
plot(yearly_subsetter(single_year))
}
plot(yearly_subsetter(single_year), main = single_year)
plot(yearly_subsetter(single_year), main = single_year)
plot(yearly_subsetter(single_year), main = single_year)
for (single_year in c("1930", "1931", "1937")) {
plot(yearly_subsetter(single_year), main = single_year)
}
#set some Rmd defaults
#figure height and width specification
#knitr = F to suppress output of variables
knitr::opts_chunk$set(echo = TRUE, fig.height = 6, fig.width = 7, warning = F)
#load in libraries
library(dittoSeq)
library(tidyverse)
library(Seurat)
Tcells <- readRDS(file = '../raw_data/downsampled_Tcells_raw.rds')
Tcells
Tcells <- readRDS(file = '../raw_data/downsampled_Tcells_raw.rds')
Tcells
View(Tcells)
#excluding cells with higher mitochondrial DNA
Tcells[["percent.mito"]] <- PercentageFeatureSet(object = Tcells,
pattern = "^MT-")
pre_filt_vlns = multi_dittoPlot(object = Tcells,
vars = c("nFeature_RNA", "nCount_RNA","percent.mito"),
group.by = "orig.ident",
plots = c("vlnplot","jitter"),
jitter.width = 1.5,
jitter.size = 0.25)
plot(pre_filt_vlns)
pre_filt_mito <- dittoScatterPlot(object = Tcells,
x.var = "nFeature_RNA",
y.var = "percent.mito")
plot(pre_filt_mito)
pre_filt_count <- dittoScatterPlot(object = Tcells,
x.var = "nFeature_RNA",
y.var = "nCount_RNA")
plot(pre_filt_count)
Tcells <- subset(x = Tcells,
subset = nFeature_RNA > 750 & nCount_RNA > 1500 & percent.mito < 5)
post_filt_count <- dittoScatterPlot(object = Tcells,
x.var = "nFeature_RNA",
y.var = "nCount_RNA")
post_filt_mito <- dittoScatterPlot(object = Tcells,
x.var = "nFeature_RNA",
y.var = "percent.mito")
pre_filt_count + post_filt_count
pre_filt_mito + post_filt_mito
Tcells@meta.data <- Tcells@meta.data %>%
mutate(Age = case_when(grepl("FS", Sample) ~ 'fetal',
grepl('UCB', Sample) ~ 'cord',
grepl('APB', Sample) ~ 'adult'))
unique(Tcells@meta.data$Age)
# Add Tcelltype
samples.4 <- c("FS3", "FS4", "FS5", "UCB1", "UCB2", "UCB5", "APB1", "APB2", "APB4", "APB5")
samples.8 <- c("FS1", "FS5", "UCB2", "UCB3", "UCB4", "UCB5", "APB2", "APB3", "APB5")
samples.48.4 <- c("FS1", "FS2", "UCB4", "UCB3", "APB3")
samples.48.8 <- c("FS3", "UCB1", "APB1", "APB4")
samples.48 <- c(samples.48.4,samples.48.8)
Tcells@meta.data <- Tcells@meta.data %>%
mutate(Tcelltype = case_when(Sample %in% samples.4 & Lane == "CD4" ~ "CD4",
Sample %in% samples.48.4 & Lane == "CD4-8" ~ "CD4",
Sample %in% samples.8 & Lane == "CD8" ~ "CD8",
Sample %in% samples.48.8 & Lane == "CD4-8" ~ "CD8"))
unique(Tcells@meta.data$Tcelltype)
#Add a Tage metadata so that I can plot things with the ages and CD4s vs CD8s separately:
Tcells@meta.data = Tcells@meta.data %>%
unite('Tage', Tcelltype:Age, remove = FALSE)
unique(Tcells@meta.data$Tage)
print(Tcells@meta.data)
head(Tcells@meta.data)
Tcells@meta.data$CellCycle <- Idents(Tcells)
Tcells@meta.data$CellCycle <- Idents(Tcells)
Tcells <- CellCycleScoring(object = Tcells,
s.features = cc.genes$s.genes,
g2m.features = cc.genes$g2m.genes,
set.ident = TRUE)
Tcells@meta.data$CellCycle <- Idents(Tcells)
# Visualize the distribution of cell cycle markers across
genes_to_plot = c('PCNA','NASP', 'HMGB2', 'SMC4', 'TUBB4B')
multi_dittoPlot(object = Tcells,
var = genes_to_plot,
plots = c("ridgeplot"),
group.by = 'CellCycle')
multi_dittoPlot(object = Tcells,
var = genes_to_plot,
plots = c("ridgeplot"),
group.by = 'CellCycle')
Tcells <- CellCycleScoring(object = Tcells,
s.features = cc.genes$s.genes,
g2m.features = cc.genes$g2m.genes,
set.ident = TRUE)
#Can sort cells by identity using Idents(Tcells) <- "meta_data_column"
Tcells@meta.data$CellCycle <- Idents(Tcells)
# Visualize the distribution of cell cycle markers across
genes_to_plot = c('PCNA','NASP', 'HMGB2', 'SMC4', 'TUBB4B')
multi_dittoPlot(object = Tcells,
var = genes_to_plot,
plots = c("ridgeplot"),
group.by = 'CellCycle')
print(genes_to_plot)
cc.genes
cc.genes$s.genes
multi_dittoPlot(object = Tcells,
vars = c("nFeature_RNA", "nCount_RNA","percent.mito"),
group.by = "orig.ident",
plots = c("vlnplot","jitter"),
jitter.width = 1.5,
jitter.size = 0.25)
# Better examined with:
dittoScatterPlot(Tcells,
"nFeature_RNA", "nCount_RNA", color.var = "percent.mito",
max = 20) +
geom_hline(yintercept = 1500) +
geom_vline(xintercept = 750)
table(Tcells$Sample,Tcells$Lane,Tcells$Tcelltype)
?multi_dittoPlot
?multi_dittoPlot(object = Tcells,
vars = c("nFeature_RNA", "nCount_RNA","percent.mito"),
group.by = "orig.ident",
plots = c("vlnplot","jitter"),
jitter.width = 1.5,
jitter.size = 0.25)
# Better examined with:
dittoScatterPlot(Tcells,
"nFeature_RNA", "nCount_RNA", color.var = "percent.mito",
max = 20) +
geom_hline(yintercept = 1500) +
geom_vline(xintercept = 750)
table(Tcells$Sample,Tcells$Lane,Tcells$Tcelltype)
multi_dittoPlot(object = Tcells,
vars = c("nFeature_RNA", "nCount_RNA","percent.mito"),
group.by = "orig.ident",
plots = c("vlnplot","jitter"),
jitter.width = 1.5,
jitter.size = 0.25)
# Better examined with:
dittoScatterPlot(Tcells,
"nFeature_RNA", "nCount_RNA", color.var = "percent.mito",
max = 20) +
geom_hline(yintercept = 1500) +
geom_vline(xintercept = 750)
table(Tcells$Sample,Tcells$Lane,Tcells$Tcelltype)
multi_dittoPlot(object = Tcells,
vars = c("nFeature_RNA", "nCount_RNA","percent.mito"),
group.by = "orig.ident",
plots = c("vlnplot","jitter"),
jitter.width = 1.5,
jitter.size = 0.25)
# Better examined with:
dittoScatterPlot(Tcells,
"nFeature_RNA", "nCount_RNA", color.var = "percent.mito",
max = 20) +
geom_hline(yintercept = 1500) +
geom_vline(xintercept = 750)
Tcells@meta.data
Tcells <- NormalizeData(
object = Tcells,
normalization.method = "LogNormalize",
scale.factor = 10000)
?NormalizeData
Tcells <- NormalizeData(
object = Tcells,
normalization.method = "LogNormalize",
scale.factor = 10000)
?NormalizeData
Tcells <- FindVariableFeatures(object = Tcells,
selection.method = "vst",
nfeatures = 2000)
#If you want to include a particular gene into your analysis (one that isn't included in the most variable genes analysis), concatenate the name into the variable features list
# plot variable features with and without labels
LabelPoints(plot = VariableFeaturePlot(Tcells),
points = head(VariableFeatures(Tcells), 10),
repel = TRUE)
#Scale without regressing out any variables
Tcells <- ScaleData(
object = Tcells,
vars.to.regress = c("CellCycle", "percent.mito", "nCount_RNA"))
#Scale without regressing out any variables
Tcells <- ScaleData(
object = Tcells,
vars.to.regress = c("CellCycle", "percent.mito", "nCount_RNA"))
#Scale without regressing out any variables
Tcells <- ScaleData(
object = Tcells,
vars.to.regress = c("CellCycle", "percent.mito", "nCount_RNA"))
dir.create(path = "../processed_data/")
saveRDS(Tcells, file = "../processed_data/Tcells_analyzed.rds")
# Tcells <- readRDS("../processed_data/Tcells_analyzed.rds"))
all.genes <- c(rownames(Tcells))
all.genes
dir.create(path = "../processed_data/")
saveRDS(Tcells, file = "../processed_data/Tcells_analyzed.rds")
# Tcells <- readRDS("../processed_data/Tcells_analyzed.rds"))
#Run PCA
Tcells <- RunPCA(
object = Tcells,
verbose = T,
npcs = 50)
PCHeatmap(
object = Tcells,
dims = 1:12,
cells = 2000,
balanced = TRUE
)
ElbowPlot(object = Tcells)
# this code took 4 mins to run on a machine with 32gb ram
# recommend running on your own time
# Tcells <- JackStraw(object = Tcells, num.replicate = 100, dims = 20, verbose = TRUE)
# Tcells <- ScoreJackStraw(Tcells, dims = 1:20)
# JackStrawPlot(Tcells, dims = 1:20)
Tcells <- FindNeighbors(object = Tcells,
reduction = "pca",
k.param = 20,
dims = 1:9)
Tcells <- FindClusters(object = Tcells,
modularity.fxn = 1,
algorithm = 1,
resolution = 0.1)
PCHeatmap(
object = Tcells,
dims = 1:20,
cells = 2000,
balanced = TRUE
)
ElbowPlot(object = Tcells)
# this code took 4 mins to run on a machine with 32gb ram
# recommend running on your own time
# Tcells <- JackStraw(object = Tcells, num.replicate = 100, dims = 20, verbose = TRUE)
# Tcells <- ScoreJackStraw(Tcells, dims = 1:20)
# JackStrawPlot(Tcells, dims = 1:20)
PCHeatmap(
object = Tcells,
dims = 1:12,
cells = 2000,
balanced = TRUE
)
ElbowPlot(object = Tcells)
# this code took 4 mins to run on a machine with 32gb ram
# recommend running on your own time
# Tcells <- JackStraw(object = Tcells, num.replicate = 100, dims = 20, verbose = TRUE)
# Tcells <- ScoreJackStraw(Tcells, dims = 1:20)
# JackStrawPlot(Tcells, dims = 1:20)
Tcells <- JackStraw(object = Tcells, num.replicate = 100, dims = 20, verbose = TRUE)
Tcells <- ScoreJackStraw(Tcells, dims = 1:20)
JackStrawPlot(Tcells, dims = 1:20)
Tcells <- RunUMAP(
object = Tcells,
reduction = "pca",
dims = 1:9,
seed.use = 1)
#Colored with CD4s lighter and CD8s darker
dittoDimPlot(Tcells, "Tage", size = 1, reduction.use = "umap",
colors = c(1:3,9:11), main = "T cells Lineage and Stage",
rename.var.groups = c("Adult-CD4", "Fetal-CD4", "UCB-CD4",
"Adult-CD8", "Fetal-CD8", "UCB-CD8"))
#Colored with CD4s lighter and CD8s darker
dittoDimPlot(Tcells, "Tage", size = 1.5, reduction.use = "umap",
colors = c(1:3,9:11), main = "T cells Lineage and Stage",
rename.var.groups = c("Adult-CD4", "Fetal-CD4", "UCB-CD4",
"Adult-CD8", "Fetal-CD8", "UCB-CD8"))
dittoColors()
scales::show_col(dittoColors()[1:10])
